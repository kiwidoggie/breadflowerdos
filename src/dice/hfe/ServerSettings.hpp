#pragma once

#include <string>

namespace dice
{
	namespace hfe
	{
		class ServerSettings	// 0x00 (0)
		{
		public:
			std::string m_configFile;					 // 0x00 (0)
			std::string m_serverName;					 // 0x1C (28)
			std::string m_password;						 // 0x38 (56)
			bool m_internet;							 // 0x54 (84)
			unsigned int m_bandwidthChoke;				 // 0x58 (88)
			unsigned int m_maxConnectionType;			 // 0x5C (92)
			std::string m_welcomeMessage;				 // 0x60 (96)
			std::string m_serverIP;						 // 0x7C (124)
			unsigned int m_serverPort;					 // 0x98 (152)
			bool m_votingEnabled;						 // 0x9C (156)
			unsigned int m_votingTime;					 // 0xA0 (160)
			unsigned int m_minPlayersForVoting;			 // 0xA4 (164)
			bool m_voipEnabled;							 // 0xA8 (168)
			unsigned int m_voipQuality;					 // 0xAC (172)
			bool m_voipServerRemote;					 // 0xB0 (176)
			std::string m_voipServerRemoteIP;			 // 0xB4 (180)
			unsigned int m_voipServerPort;				 // 0xD0 (208)
			unsigned int m_voipBFClientPort;			 // 0xD4 (212)
			unsigned int m_voipBFServerPort;			 // 0xD8 (216)
			std::string m_voipSharedPassword;			 // 0xDC (220)
			bool m_allowFreeCam;						 // 0xF8 (248)
			bool m_allowExternalViews;					 // 0xF9 (249)
			bool m_allowNoseCam;						 // 0xFA (250)
			bool m_hitIndicator;						 // 0xFB (251)
			unsigned int m_maxPlayers;					 // 0xFC (252)
			unsigned int m_numPlayersNeededToStart;		 // 0x100 (256)
			float m_notEnoughPlayersRestartDelay;		 // 0x104 (260)
			unsigned int m_startDelay;					 // 0x108 (264)
			unsigned int m_endDelay;					 // 0x10C (268)
			float m_spawnTime;							 // 0x110 (272)
			float m_manDownTime;						 // 0x114 (276)
			unsigned int m_ticketRatio;					 // 0x118 (280)
			unsigned int m_roundsPerMap;				 // 0x11C (284)
			unsigned int m_timeLimit;					 // 0x120 (288)
			unsigned int m_scoreLimit;					 // 0x124 (292)
			unsigned int m_soldierFriendlyFire;			 // 0x128 (296)
			unsigned int m_vehicleFriendlyFire;			 // 0x12C (300)
			unsigned int m_soldierSplashFriendlyFire;	 // 0x130 (304)
			unsigned int m_vehicleSplashFriendlyFire;	 // 0x134 (308)
			double padding0;					 // real padding // 0x138 (312)
			bool m_tkPunishEnabled;				 // 0x140 (320)
			unsigned int m_tkNumPunishToKick;	 // 0x144 (324)
			bool m_tkPunishByDefault;			 // 0x148 (328)
			std::string m_interfaceIP;			 // 0x14C (332)
			unsigned int m_gameSpyPort;			 // 0x168 (360)
			bool m_allowNATNegotiation;			 // 0x16C (364)
			bool m_autoRecord;					 // 0x16D (365)
			std::string m_demoIndexURL;			 // 0x170 (368)
			std::string m_demoDownloadURL;		 // 0x18C (396)
			std::string m_autoDemoHook;			 // 0x1A8 (424)
			unsigned int m_demoQuality;			 // 0x1C4 (452)
			std::string m_adminScript;			 // 0x1C8 (456)
			float m_timeBeforeRestartMap;		 // 0x1E4 (484)
			bool m_autoBalanceTeam;				 // 0x1E8 (488)
			float m_teamRatioPercent;			 // 0x1EC (492)
			std::string m_sponsorText;			 // 0x1F0 (496)
			std::string m_sponsorLogoURL;		 // 0x20C (524)
			std::string m_communityLogoURL;		 // 0x228 (552)
			std::string m_customMapURL;			 // 0x244 (580)
			unsigned int m_radioSpamInterval;	 // 0x260 (608)
			unsigned int m_radioMaxSpamFlagCount;	  // 0x264 (612)
			unsigned int m_radioBlockDurationTime;	  // 0x268 (616)
			bool m_punkBuster;						  // 0x26C (620)
			bool m_ranked;							  // 0x26D (621)
			bool m_useGlobalRank;					  // 0x26E (622)
			bool m_useGlobalUnlocks;				  // 0x26F (623)
			unsigned int m_endOfRoundDelay;			  // 0x270 (624)
			unsigned int m_numReservedSlots;		  // 0x274 (628)
			bool m_maxRank;							  // 0x278 (632)
			unsigned int m_fieldUnlockLevel;		  // guessed // 0x27C (636)
			unsigned int m_maxUnlockLevel;			  // 0x280 (640)
			unsigned int m_minUnlockLevel;			  // 0x284 (644)
			bool m_friendlyFireWithMines;			  // 0x288 (648)
			float m_botSkill;						  // 0x28C (652)
			bool m_allowSpectators;					  // 0x290 (656)
			bool m_allowTitanMovement;				  // 0x291 (657)

		};	  // 0x298 (664)

		extern ServerSettings* g_serverSettings;
	};	  // namespace hfe
}	 // namespace dice
